apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name: pihole
          image: pihole
          ports:
            - containerPort: 80
              name: pihole
          volumeMounts:
            - name: pihole-data
              mountPath: /var/www/html
      volumes:
        - name: pihole-data
          persistentVolumeClaim:
            claimName: pihole-pvc
---
kind: Service
apiVersion: v1
metadata:
  name: pihole-service
spec:
  type: ClusterIP
  selector:
    app: pihole
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /srv/data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pihole-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pihole
  annotations:
    spec.ingressClassName: pihole
    cert-manager.io/cluster-issuer: letsencrypt-prod # must match cert/clusterissuer.yaml metadata.name
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: pihole
  rules:
    - host: pi.sbb.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name:  pihole-service
                port:
                  number: 80
  tls:
    - hosts:
        - pi.sbb.org
      secretName: letsencrypt-prod-secret

---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: pihole
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx